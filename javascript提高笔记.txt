::call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 
var first_object = { 
    num: 42 
}; 
var second_object = { 
    num: 24 
}; 
function multiply(mult) { 
    return this.num * mult; 
} 
multiply.call(first_object, 5); // returns 42 * 5 
multiply.call(second_object, 5); // returns 24 * 5 

::apply方法 apply方法的第一个参数也是要传入给当前对象的对象，即函数内部的this。后面的参数都是传递给当前对象的参数。 
对于apply和call两者在作用上是相同的，但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 
如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3])同时使用apply的好处是可以直接将当前函数的arguments对象作为apply的第二个参数传入。 
-------------------------------------
arguments
arguments对象是函数里面的参数数组
arguments是不可变数组，不能在其中使用pop,shift那些数组方法,jquery的makeArray可以把她转成数组
var newArray = $.makeArray(arguments)

-------------------------------------
::caller 属性 
返回一个对函数的引用，即调用了当前函数的函数体。 
functionName.caller :functionName 对象是所执行函数的名称。 
说明: 对于函数来说，caller 属性只有在函数执行时才有定义。 如果函数是由 JScript 程序的顶层调用的，那么 caller 包含的就是 null 。如果在字符串上下文中使用 caller 属性，那么结果和 functionName.toString 一样，也就是说，显示的是函数的反编译文本。(可直接获取函数的string！！)

：：callee属性 
返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文。 
[function.]arguments.callee:可选项 function 参数是当前正在执行的 Function 对象的名称。 
说明: 
callee 属性的初始值就是正被执行的 Function 对象。 
callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿 
函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性 
仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时 
用于验证还是比较好的。arguments.length是实参长度，arguments.callee.length是 
形参长度，由此可以判断调用时形参长度是否和实参长度一致。 

::bind 
var first_object = { 
    num: 42 
}; 
var second_object = { 
    num: 24 
}; 
function multiply(mult) { 
    return this.num * mult; 
} 
Function.prototype.bind = function(obj) { 
    var method = this, 
    temp = function() { 
	return method.apply(obj, arguments); 
    }; 
    return temp; 
} 
var first_multiply = multiply.bind(first_object); 
first_multiply(5); // returns 42 * 5 
var second_multiply = multiply.bind(second_object); 
second_multiply(5); // returns 24 * 5 

-------------------------------------------------
prototype
function独有的原型
1)prototype里面添加的方法应该要理解成是添加实例方法, 因为无论在哪里定义 类.prototype.fuck =function(){}; 然后这个类的所有实例都会有了这个fuck()方法，并且里面的this就是当前对象

2)prototype原型类似一个模板对象，他上面的属性被用来初始化一个新对象；任何一个对象都可以作为另外一个对象的原型对象，用以共享属性，这个多用于继承或者为实例添加方法；
    Animal.prototype = new OldAnimal();//这样所有的Animal就马上继承了OldAnimal的属性
    //有时每次要new OldAnimal会造成内存占用，可以使用一个空方法去做，因为需要的其实只是OldAnimal的属性
    var temp = function(){};
    temp.prototype = OldAnimal.prototype
    Animal.prototype = new temp();

------------------------------------------------
this 在函数调用位置里面的变化
有时要把对象的function传到一些其他的方法中调用，这是方法里面的this会容易发生变化，我们应该先用变量保存下来
var clicky = {
    wasClicked: function(){
	///
    },

    addListeners: function() {
	var self = this; //这里先保存一下this,那下面在其他上下文调用这个对象的时候就保证this不会变化
	$('#click').click(function(){
	    self.wasClicked();
	});
    }
}

//上面的例子可以通过apply写得更优雅，把回调包在另外一个匿名函数中，保持上下文
var proxy = fucntion(func, thisObject){
    return function(){
	return func.apply(thisObject,arguments);
    }
}
//上面的回调就可以写成
$("#click").click(proxy(this.wasClicked,this));

------------------------------------
javascript的私有属性
我们可以把私有属性都定义到一个匿名函数里面，让外部不能访问
var Person = fucntion(){};
(function(){
    var findById = function(){/*xxxx*/};
    Person.find = function(id) {
	return findById(id);
    }
})();
//这个例子findById这个属性是不能通过Person.findById访问的

------------------------------------
jquery的delegate 和 bind的对比
如果用bind或者直接绑定function到选择器，会每一个匹配元素都会绑定上事件处理函数，这样很浪费性能，delegate则只会委托一份
$("ul li").click(function(){})//dont do this!!!
$("ul").delegate("li", "click", [data], function(){}) //这样可以只绑定一个函数，性能更好，并且新加入的dom元素也会委托到,类似live
------------------------------------
jquery的trigger自定义事件
$(".class").bind('refresh.fuck', function(){})
$(".class").trigger('refresh.fuck')

-----------------------------------
修改浏览器后退行为的方法
利用window.location.hash
$("#jas").click(function(){
    window.location.hash = $(this).val();
}); //把东西保存到window.location.hash

$(window).bind('hashchange', function(){
    $('#jas').val  = window.location.hash
});//每次window退后就会把东西填回到div里面

-----------------------------------
文件的高级应用(某些基于html5接口)
1)访问文件信息
html5用File对象表示文件,有三个属性(name size type), FileList对象可以获取文件数组

2)验证文件（是否图片）
var input = $("input[type='file']");
input.change(function(){
    var files = this.files;
    for(var i=0; i<files.length; i++){
	assert(files[i].type.match(/images.*/));
    }
});

3)拖曳
事件有 dragstart, drag, dragover, dragenter, dragleave, drop, dropend
启用(设置dragable属性):
<div dragable="true" id="dragme">Drag me!</div> //我们可以调用dragstart事件,调用setData()函数
var element = $("#dragme")
element.bind("dragstart", function(event){
    event = event.originalEvent; //不用jquery的抽象对象,因为要用到dataTransfer里面的api
    
    event.dataTransfer.effectAllowed = "move";
    event.dataTransfer.setData("text/plain", $(this).text()); //这样这个div拖曳到那个地方就可以让他显示Dragme!
    event.dataTransfer.setData("text/html", $(this).html());
    event.dataTransfer.setDragImage("/images/drag.png", -10, -10); //拖曳的时候跟随鼠标的图像，坐标是相对鼠标的位置
});
除了"text/plain"之外还有"text/uri-list"用于拖曳连接
event.dataTransfer.setData("text/uri-list","http://www.gu-da.com")

4)释放拖曳
element.bind("dragenter", function(e){
    e.stopPropagation();
    e.preventDefault();
});


element.bind("dragover", function(e){
    e.originalEvent.dataTransfer.dropEffect = "copy"; //设置鼠标

    e.stopPropagation();
    e.preventDefault();
});

//只有释放了dragenter和dragover事件之后，我们才能监听drop事件,drop事件的dataTransfer有个files事件返回FileList,这个dataTransfer有types和getData属性
element.bind("drop", function(e){
    e = e.originalEvent;
    
    e.dataTransfer.types.match("File") //如果有文件会有Files字样
    e.dataTransfer.getData("Text")//如果不是文本文件会返回undefined

    files = e.dataTransfer.files
    files do name size type
});

5)撤销body原来的dragover事件
通常拉个文件到浏览器都会让浏览器重定向，要取消这事件
$('body').bind("dragover",function(e){
    e.stopPropagation();
    e.preventDefault();
    return false;
});

6)读文件!!
获取File引用之后可以实例一个FileReader对象，这对象有四种方法去读取文件
readAsBinaryString(Blob|File) //二进制字符串
readAsDataURL(Blob|File) //以url返回这文件，可以用做图像src属性!
readAsText(Blob|File, enccoding='UTF-8') 
readAsArrayBuffer()//很多浏览器未实现

FileReader还包括几个事件
onerror //发生错误时候调用
onprogress //数据读取的时候调用
onload //数据可用的时候调用

要使用FileReader,要生成实例，监听事件
reader = new FileReader();
reader.onload = function(e){
    var data = e.target.result; //onload有result属性
};
reader.readAsDataURL(file)

略缩图例子!! :
preview = $("img#preview")
//检查文件类型
//检查体积
if(file.type.match(/image.*/)) && file.size< 50000000 {
    var reader = new FileReader();
    reader.onload= function(e){
	var data = e.target.result;
	preview.attr("src",data);
    };
    reader.readAsDataURL(file);
}

7)hack掉原来上传文件丑陋的按钮！ //可暂不用
var input = $("attach").broseElement();
input.change(function(){
    var files = $(this).attr("files");
});

8)使用ajax上传文件!!
xhr2提供的借口可以另浏览器不跳转
FormData是一个非常方便的表单对象，提供很多简易借口,可以创建表单对象，也可以在init时候把已有对象抓进来
var formData = new FormData($("form")[0]) //创建新对象
formData.append("stringKey","StringData") //添加字符串
formData.append("fileKey",file) //添加文件对象

FormData准备好之后，就可以用ajax post到服务器了,要用jquery发ajax的话，要注意把processData设成false,这样jquery就不会对数据序列化,并且不需要设置Content-Type头
formdata:
$.ajax(
	{
	    data: formData, //这里其实也可以直接传File对象
	    processData: false,
	    url: "your url actio$an",
	    type: "POST",
	    success: function(){...};
	}
      )

xhr:
var req = new XMLHttpRequest();
req.open("POST","URL",true);
req.send(file)

上面两种上传方式只会传纯文件内容，没有文件头,会缺少文件名的信息,要的话可以这样传
$.ajax({
    url:"blah",
    type:"POST",
    success:function(){},
    processData:false,
    contentType:"multipart/form",
    beforeSend: function(xhr,settings){
	xhr.setRequestHeader("Cache-Control","no-cache")
	xhr.setRequestHeader("X-File-Name",file.fileName)
	xhr.setRequestHeader("X-File-Size",file.fileSize)
    },
    data: file //推荐用FormData对象，因为纯文件对象经常会有服务器方的问题
})

9)进度条
xhr2有progress事件，可以方便跟踪进度
下载的进度
req = new XMLHttpRequest();
req.addEventListener("progress", updateProgress, false);
req.addEventListener("load", transferComplete, false);
req.open();
上传的进度需要给upload添加监听
req = new XMLHttpRequest();
req.upload.addEventListener("progress", updateProgress, false);
req.upload.addEventListener("load", transferComplete, false);
req.open();

看jquery的例子,xhr对象都传给了beforeSend的回调
$.ajax({
    url:"blah",
    type:"POST",
    success:function(){},
    processData:false,
    dataType:"multipart/form",
    beforeSend: function(xhr,settings){
	var upload = xhr.upload;
	if(settings.progress){
	    upload.addEventListener("progress",settings.progress,false);
	}
	if(settings.load){
	    upload.addEventListener("load", settings.load, false);
	}
	var fd = new FormData;
	for(var key in settings.data) {
	    fd.append(key, settings.data[ke$ay]);
	}
	settings.data = fd;
    },
    data: file 
});

progress事件包含一个position(已上传)和total(总字节数)的属性,还有一个timeStamp（上传了的时间）
var progress = function(event){
    var percentage = Math.round((event.prosition/event.total) * 100);
    //设置进度条
}


