----------------------附------------------------
二十三,SASS (css的框架，方便我们复用css代码)

a)支持变量方式,存取变量和计算
/*scss代码
$blue: #3bbfce;
$margin: 16px;

.content-navigation {
  border-color: $blue;
  color:
    darken($blue, 9%);
}

.border {
  padding: $margin / 2;
  margin: $margin / 2;
  border-color: $blue;
}
*/
#变量还可以用作字符串，和#{}配合使用，类似ruby
$side = top;
#fuck {border-#{$side}-color: orange;}

b)支持结构嵌套
/*scss代码
table.hl {
  margin: 2em 0;
  td.ln {
    text-align: right;
  }
}

li {
  font: {
    family: serif;
    weight: bold;
    size: 1.2em;
  }
}
*/

c)mixin 比变量更有效的东西，甚至可以传参数
/*
@mixin table-base {
  th {
    text-align: center;
    font-weight: bold;
  }
  td, th {padding: 2px}
}

@mixin left($dist) {
  float: left;
  margin-left: $dist;
}

#data {
  @include left(10px);
  @include table-base;
}   
*/

#方法参数还可以指定默认值 
@mixin tab($num,$str:10px){}

d)继承，多用于class
/*
.error {
  border: 1px #f00;
  background: #fdd;
}
.error.intrusion {
  font-size: 1.3em;
  font-weight: bold;
}

.badError {
  @extend .error;
  border-width: 3px;
}    
*/
#对于使用自身的引用可以使用&
a {
    &:hover {
	color:red;
    }
}

e)import,_xxx.scss 类似partial
/* _rounded.scss */
@mixin rounded($side, $radius: 10px) {
  border-#{$side}-radius: $radius;
  -moz-border-radius-#{$side}: $radius;
  -webkit-border-#{$side}-radius: $radius;
}

/* style.scss */
@import "rounded";
#navbar li { @include rounded(top); }
#footer { @include rounded(top, 5px); }
#sidebar { @include rounded(left, 8px); }

f)更多应用
#scss和sass互换#
$ sass-convert style.sass style.scss
$ sass-convert style.scss style.sass
#从scss生成css#
sass input.scss output.css
sass --watch input.scss:output.css #这样可以用观察模式看着css的变化
#更多的详细设置文档：http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#plugin

g)开始用sass，mixin可以用=　代替

css伪类属性选择器
i[class~="icon-"] 正则
i[class="icon-edit"] 确切
父类选择
$a > i[class~="icon-"]  {textdecorator: none} 这个样式作用在a上

属性相等
/* 样式应用与当前 :hover 所在的 li 的 target ID 属性值相等的 p 上 */
li:hover /targetID/ p { border:2px solid #609060;  }

默认选项
  option:default {xxx}

h)让position:fixed 后支持浏览器宽度 定位好某一地方
positicon: fixed
bottom: 0
left: 50% //先把他绝对定位到中间
margin-left: -500px //然后这里就可以调好位置，绝对适应到浏览器变化

nth-child用法
:nth-child(2)选取第几个标签，“2可以是你想要的数字”
:nth-child(n+4)选取大于等于4标签，“n”表示从整数，下同
:nth-child(-n+4)选取小于等于4标签
:nth-child(2n)选取偶数标签，2n也可以是even
:nth-child(2n-1)选取奇数标签，2n-1可以是odd
:nth-child(3n+1)自定义选取标签，3n+1表示“隔二取一”
:last-child选取最后一个标签
:nth-last-child(3)选取倒数第几个标签,3表示选取第3个


##CSS3动画!!
img{
  height:15px;
  width:15px;

}

img:hover{
  height: 450px;
  width: 450px;
}
//这里可以设定他们的果度状态长度
img{
  transition: 1s;
}
//可以指定height
img{
    transition: 1s height;
}
//同一个transition 可以指定多个属性
img{
    transition: 1s height, 1s width;
}
//先让height变化，delay一下再到width变化
img{
    transition: 1s height, 1s 1s width;
}
//逐渐放慢，非匀速
img{
  transition: 1s ease;
}
//还包括
（1）linear：匀速
（2）ease-in：加速
（3）ease-out：减速
（4）cubic-bezier函数：自定义速度模式

img{
    transition: 1s height cubic-bezier(.83,.97,.05,1.44);
}

CSSAnimation
//先指定一个动画效果名称raibow
div:hover {
  animation: 1s rainbow;
}

//用keyframes定义rainbow效果
@keyframes rainbow {
  0% { background: #c00;  }
  50% { background: orange;  }
  100% { background: yellowgreen;  }
}

//加入infinite关键字，无限播放
div:hover {
  animation: 1s rainbow infinite; //infinite 可以变成次数，例如3
}

##css3transform
scale(2,2), x,y同时扩展2倍


#box-shadow
box-shadow: inset? && [ <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>?  ]  

inset关键字，将外部投影转变为内部阴影。
第1个长度offset-x代表阴影x轴向的偏移，正值向右，负值向左。
第2个长度offset-y代表阴影y轴向的偏移，正值向下，负值向上。
第3个长度blur-radius代表阴影模糊半径，不允许负值。
第4个长度spread-radius代表阴影扩展半径，正值放大，负值缩小。
color代表投影的颜色。

#text 超出的时候用省略号
white-space: nowrap
text-overflow: ellipsis

就把你friend里的这个key值remove掉
